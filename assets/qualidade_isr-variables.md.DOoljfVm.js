import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.fqSCwWg6.js";const l="/insper-embarcados/site-vitepress/assets/checker-rule-isr-volatile.D_5dIsqf.png",E=JSON.parse('{"title":"ISR - Variáveis","description":"","frontmatter":{},"headers":[],"relativePath":"qualidade/isr-variables.md","filePath":"qualidade/isr-variables.md"}'),t={name:"qualidade/isr-variables.md"};function o(r,s,p,d,h,c){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="isr-variaveis" tabindex="-1">ISR - Variáveis <a class="header-anchor" href="#isr-variaveis" aria-label="Permalink to &quot;ISR - Variáveis&quot;">​</a></h1><p>Devemos seguir algumas regras básicas quando desenvolvemos código que faz uso de interrupção, devemos tratar essa secção do programa como algo especial e que possui algumas regras básicas para operar corretamente.</p><p>!!! info Para informações mais detalhadas consulte:</p><pre><code>- https://betterembsw.blogspot.com/search/label/interrupts 
</code></pre><h2 id="variaveis-volatile" tabindex="-1">Variáveis volatile <a class="header-anchor" href="#variaveis-volatile" aria-label="Permalink to &quot;Variáveis volatile&quot;">​</a></h2><p>Interrupção é normalmente um evento gerado pelo hardware e que por consequência executa uma função de <code>Handler</code> sem que o compilador tenha conhecimento disso (por ser um evento externo ao software). Por conta dessa caracteristica temos que tomar um cuidado especial com as variáveis que são acessadas dessa função que é chamada pelo hardware.</p><p>!!! tip &quot;Rule 1.2&quot; Todas as variáveis globais acessadas de uma interrupção (ISR) devem possuir a keyword: <code>volatile</code></p><p>!!! tip &quot;Rule 1.3&quot; Somente as variáveis globais e modificadas durante a ISR devem ser globais.</p><p>Essas regras pode ser flexibilizada quando desejamos acessar periféricos e memórias externas, os valores desses endereços de memória são alterados sem o conhecimento do compilador.</p><h2 id="exemplo" tabindex="-1">Exemplo <a class="header-anchor" href="#exemplo" aria-label="Permalink to &quot;Exemplo&quot;">​</a></h2><p>O exemplo a seguir demonstra um ==uso errado== da keyword <code>volatile</code>:</p><ul><li><code>btn_callback</code>: É uma função de interrupção chamada pelo Hardware!</li><li><code>f_btn</code>: É uma variável global modificada pelo um evento no pino do botão, deveria ser <code>volatile</code></li><li><code>cnt</code>: É apenas um contador não devemos interferir no processo de compilação.</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f_btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // deveria ser volatile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ISR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> btn_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f_btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // variável alterada de uma interrupcão</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cnt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // não precisa ser volatile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (f_btn) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cnt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            f_btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>O exemplo viola as regra <strong>1.1</strong> e <strong>1.2</strong> nas duas variáveis ( <code>f_bnt</code> e <code>cnt</code> ) gerando o seguinte erro:</p><p><img src="`+l+'" alt=""></p><p>!!! exercise choice two-cols Qual alternativa a seguir seria uma solucão válida para corrigir o código exemplo?</p><pre><code>- [ ] `volatile int f_btn = 0;` `volatile int cnt = 0;`\n- [ ] `int f_btn = 0;` `volatile int cnt = 0;`\n- [x] `volatile int f_btn = 0;` `int cnt = 0;`\n- [ ] `int volatile f_btn = 0;` `int cnt = 0;`\n</code></pre><h2 id="praticando" tabindex="-1">Praticando <a class="header-anchor" href="#praticando" aria-label="Permalink to &quot;Praticando&quot;">​</a></h2><p>Vamos praticar um pouco e corrigir as regras básicas de qualidade de código e boas práticas em sistemas embarcados, para isso crie um repositório pelo <em>github classroom</em> e então modifique os arquivos conforme indicado.</p><ol><li>Crie um repositório com o código exemplo acessando o github classroom</li><li>Analise o log do actions e verifique que o checker executou e encontrou alguns erros.</li><li>Corrigir o código e verificar se ainda continuamos com erros.</li></ol>',20)]))}const u=a(t,[["render",o]]);export{E as __pageData,u as default};
