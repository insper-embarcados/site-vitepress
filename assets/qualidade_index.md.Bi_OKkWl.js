import{_ as a,c as o,o as r,ae as i}from"./chunks/framework.fqSCwWg6.js";const p=JSON.parse('{"title":"Qualidade de código","description":"","frontmatter":{},"headers":[],"relativePath":"qualidade/index.md","filePath":"qualidade/index.md"}'),t={name:"qualidade/index.md"};function s(l,e,d,n,c,u){return r(),o("div",null,e[0]||(e[0]=[i(`<h1 id="qualidade-de-codigo" tabindex="-1">Qualidade de código <a class="header-anchor" href="#qualidade-de-codigo" aria-label="Permalink to &quot;Qualidade de código&quot;">​</a></h1><p>Regras de desenvolvimento de firmware para entregas de laboratórios, APS, projetos e avaliações. É importante ressaltar que estas são regras gerais e podem existir exceções, mas você deve pensar bem e talvez discutir com algum membro da equipe antes de querer quebrar alguma delas.</p><h2 id="linguagem-c" tabindex="-1">Linguagem C <a class="header-anchor" href="#linguagem-c" aria-label="Permalink to &quot;Linguagem C&quot;">​</a></h2><p>Essas regras se referem a lingaguem C.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>&quot;With great power comes great responsibility&quot;</p><pre><code>                              Ben, Uncle.
</code></pre></div><ul><li>Usar variáveis globais apenas quando estritamente necessárias, como <code>&quot;regra de ouro&quot;</code>, só é necessário aquelas que são modificadas de dentro de uma interrupção. Pois as variáveis globais podem ser alteradas em qualquer lugar do código, tornando-o menos previsível.</li><li>Se uma função for alterar uma variável global, você deve passar o ponteiro da variável como argumento da função.</li><li>Sempre que possível deixe o código genérico e sem <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" target="_blank" rel="noreferrer"><code>magic numbers</code></a>, utilize <code>#define</code> ou <code>const</code>.</li><li>Não implementar funções dentro do <code>.h</code>, faça isso no <code>.c</code>.</li></ul><h2 id="interrupcao-callback" tabindex="-1">Interrupção / Callback <a class="header-anchor" href="#interrupcao-callback" aria-label="Permalink to &quot;Interrupção / Callback&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Você deve gastar no máximo algo entre 100-200 clocks dentro de uma interrupção.</p></div><ul><li>Apenas algumas linhas de código em C</li><li>Evitar manipular strings (<code>sprintf</code>)</li><li>Evitar usar <code>printf</code></li><li>Não atualizar displays (OLED / LCD)</li><li>Evite loops (<code>while</code> / <code>for</code>)</li></ul><p>!!! info &quot;&quot; A interrupção é um evento de hardware na qual o compilador não tem conhecimento.</p><ul><li>Lembre de dar o <strong>ACK</strong> da interrupção (exe: <code>tc_get_status</code>)</li><li>Declare as variáveis compartilhadas ( entre interrupções e a main(); ) como <a href="https://www.embedded.com/introduction-to-the-volatile-keyword/" target="_blank" rel="noreferrer"><code>volatile</code></a></li><li>No ARM para ativar interrupção é necessário configurar o periférico e o NVIC!</li></ul><h2 id="freertos" tabindex="-1">freeRTOS <a class="header-anchor" href="#freertos" aria-label="Permalink to &quot;freeRTOS&quot;">​</a></h2><ul><li>De forma geral usar <code>vTaskDelay</code> no lugar de <code>delay_ms</code>.</li><li>Não fazer uso de flags (variáveis globais) para indicar que um evento deve acontecer, usar um semáforo.</li><li>Não compartilhar variáveis globais entre tasks para transmitir informações, usar uma fila para isso.</li><li>Lembre de inicializar os recursos antes de usar (<code>xCreateSemaphore</code>, <code>xCreateQueue</code>). Indicamos fazer isso no início da função <code>main</code> e não dentro das tarefas</li></ul><h2 id="fontes" tabindex="-1">Fontes <a class="header-anchor" href="#fontes" aria-label="Permalink to &quot;Fontes&quot;">​</a></h2><ul><li><a href="https://betterembsw.blogspot.com/2013/03/rules-for-using-interrupts.html" target="_blank" rel="noreferrer">https://betterembsw.blogspot.com/2013/03/rules-for-using-interrupts.html</a></li></ul>`,15)]))}const g=a(t,[["render",s]]);export{p as __pageData,g as default};
