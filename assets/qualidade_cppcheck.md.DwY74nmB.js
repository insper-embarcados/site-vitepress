import{_ as e,c as p,o as l,ae as t,j as s,t as r,a as i}from"./chunks/framework.fqSCwWg6.js";const o="/insper-embarcados/site-vitepress/assets/cppcheck-erro.B9tzmuQf.png",E=JSON.parse('{"title":"Cppcheck","description":"","frontmatter":{"rules_cppcheck_classroom":"https://www.github.com/classroom/emb-rules-cppcheck"},"headers":[],"relativePath":"qualidade/cppcheck.md","filePath":"qualidade/cppcheck.md"}'),c={name:"qualidade/cppcheck.md"};function h(n,a,d,k,u,m){return l(),p("div",null,[a[1]||(a[1]=t(`<h1 id="cppcheck" tabindex="-1">Cppcheck <a class="header-anchor" href="#cppcheck" aria-label="Permalink to &quot;Cppcheck&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Rule 1.0</p><p>O código não deve possuir erros detectados pelo <code>cppcheck</code>.</p></div><p>O <a href="https://cppcheck.sourceforge.io/" target="_blank" rel="noreferrer">Cppcheck</a> é um analizador de código estático capaz de fazer algumas verificações básicas em um código escrito em C/C++. Essas verificações vão além das que o compilador é capaz de realizar, e podem ajudar a identificar erros antes de executarmos um código. Por exemplo, o cppcheck pode verificar se existe uma situação na qual um loop por um array passa do tamanho de memória (<em>overflow</em>). Embora o cppcheck faça uma análise estática e tenha limitações no que consegue prever do código, já é um bom começo para escrevermos códigos mais confiáveis e com menos erros.</p><p>Para ter uma ideia, os erros mais comuns cometidos por alunos de embarcados nos semestres anteriores (análise de 22a e 22b) foram:</p><ul><li><p><strong>missingReturn</strong> (53 ocorrências): Este erro ocorre quando uma função que deveria retornar um valor não o faz em todos os caminhos possíveis de execução. Isso pode levar a um comportamento indefinido no programa.</p></li><li><p><strong>legacyUninitvar / uninitvar</strong> (31 ocorrências): Indica que uma variável está sendo usada sem ser inicializada primeiro. Este é um problema antigo que pode resultar em um comportamento inesperado do programa.</p></li><li><p><strong>syntaxError</strong> (20 ocorrências): Este erro acontece quando há um problema na sintaxe do código. Isso significa que o código não segue as regras de formatação corretas da linguagem C+, tornando-o incompilável.</p></li><li><p><strong>bufferAccessOutOfBounds / arrayIndexOutOfBounds</strong> (18 ocorrências): Este erro ocorre quando o programa tenta acessar uma área de memória fora dos limites de um buffer. Isso pode resultar em um comportamento inesperado do programa ou até mesmo fazer com que ele falhe.</p></li></ul><h2 id="exemplo" tabindex="-1">Exemplo <a class="header-anchor" href="#exemplo" aria-label="Permalink to &quot;Exemplo&quot;">​</a></h2><p>Considere o código exemplo a seguir (==que contém erros==):</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NUM_ELEMENTS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiplyNumbers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiplyNumbers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[NUM_ELEMENTS];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NUM_ELEMENTS; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>O <code>cppcheck</code> analisa o código anterior e gera o seguinte log:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>hecking main.c ...</span></span>
<span class="line"><span>main.c:16:12: error: Array &#39;arr[5]&#39; accessed at index 5, which is out of bounds. [arrayIndexOutOfBounds]</span></span>
<span class="line"><span>        arr[i] = i;</span></span>
<span class="line"><span>           ^</span></span>
<span class="line"><span>main.c:15:22: note: Assuming that condition &#39;i&lt;=5&#39; is not redundant</span></span>
<span class="line"><span>    for(int i = 0; i &lt;= NUM_ELEMENTS; i++) { //arrayIndexOutOfBounds</span></span>
<span class="line"><span>                     ^</span></span>
<span class="line"><span>main.c:16:12: note: Array index out of bounds</span></span>
<span class="line"><span>        arr[i] = i;</span></span>
<span class="line"><span>           ^</span></span>
<span class="line"><span>main.c:7:9: error: Found an exit path from function with non-void return type that has missing return statement [missingReturn]</span></span>
<span class="line"><span>    int product = x * y;</span></span>
<span class="line"><span>        ^</span></span>
<span class="line"><span>main.c:12:34: error: Uninitialized variable: a [uninitvar]</span></span>
<span class="line"><span>    int result = multiplyNumbers(a, b);</span></span>
<span class="line"><span>                                 ^</span></span>
<span class="line"><span>main.c:7:17: style: Variable &#39;product&#39; is assigned a value that is never used. [unreadVariable]</span></span>
<span class="line"><span>    int product = x * y;</span></span>
<span class="line"><span>                ^</span></span>
<span class="line"><span>main.c:12:16: style: Variable &#39;result&#39; is assigned a value that is never used. [unreadVariable]</span></span>
<span class="line"><span>    int result = multiplyNumbers(a, b);</span></span>
<span class="line"><span>               ^</span></span>
<span class="line"><span>main.c:16:16: style: Variable &#39;arr[i]&#39; is assigned a value that is never used. [unreadVariable]</span></span>
<span class="line"><span>        arr[i] = i;</span></span>
<span class="line"><span>               ^</span></span>
<span class="line"><span>nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]</span></span></code></pre></div><h2 id="feedback-continuo" tabindex="-1">Feedback contínuo <a class="header-anchor" href="#feedback-continuo" aria-label="Permalink to &quot;Feedback contínuo&quot;">​</a></h2><p>Utilizaremos o <code>cppcheck</code> para verificar todas as entregas de sistemas embarcados de vocês. O analisador será executado automaticamente no repositório do github de cada aluno. Cada novo código submetido será verificado. Para a atividade valer nota é <code>obrigatório</code> que não haja erros no código.</p><p>Vamos praticar e ver como isso vai funcionar na prática durante a disciplina!</p>`,13)),s("ul",null,[s("li",null,[s("p",null,"Crie um repositório com o código exemplo acessando o github classroom: "+r(n.$frontmatter.rules_cppcheck_classroom),1)]),a[0]||(a[0]=s("li",null,[s("p",null,"Analise o log do actions e verifique que o cppcheck executou e encontrou alguns erros:")],-1))]),a[2]||(a[2]=s("p",null,[s("img",{src:o,alt:"",width:"500"})],-1)),a[3]||(a[3]=s("ul",null,[s("li",null,[i("Corrija o código "),s("code",null,"main.c"),i(" e verifique se os erros ainda continuam (dica: edite o código no próprio github).")])],-1))])}const y=e(c,[["render",h]]);export{E as __pageData,y as default};
